@page "/AdBrixCommonEvent"
@inject IJSRuntime JsRuntime

<h1 class="font-sans text-3xl font-bold">AdBrix Common Event</h1>
<br>
<table class="shadow-lg bg-white">
    <thead>
    <th class="bg-blue-400 border-2 text-center text-white px-8 py-3">EventName</th>
    <th class="bg-blue-400 border-2 text-center text-white px-8 py-3">Parameter</th>
    <th class="bg-blue-400 border-2 text-center text-white px-8 py-3">ExcuteButton</th>
    </thead>
    <tr>
        <th class="border-2 px-8 py-2">Login</th>
        <th class="border-2 px-8 py-2">
            <label>Login Id :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" @bind="LoginId" placeholder="Enter your ID"/>
        </th>
        <th class="border-2 px-8 py-2 text-center">
            <button class="btn btn-primary" @onclick="Login"> Login </button>
        </th>
    </tr>
    <tr>
        <th class="border-2 px-8 py-2">UserProperty</th>
        <th class="border-2 px-8 py-2">
            <label>Age :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" placeholder="age" @bind="Age"/>
            <p></p>
            <label>Married? :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" type="checkbox" @bind="Married"/>
            <p></p>
            <label>Real Name :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" placeholder="Real Name" @bind="RealName"/>
        </th>
        <th class="border-2 px-8 py-2 text-center">
            <button class="btn btn-primary" @onclick="UserProperty">Set UserProperty</button>
        </th>
    </tr>
    <tr>
        <th class="border-2 px-8 py-2">SignUp</th>
        <th class="border-2 px-8 py-2">
            <label for="SignUpChannel">SignUp Channel : &nbsp;&nbsp;&nbsp;</label>
            <select class="border py-2 px-3" @bind="SignChannelName">
                @foreach (var items in ChannelName())
                {
                    <option value=@items>@items</option>
                }
            </select>
        </th>
        <th class="border-2 px-8 py-2 text-center">
            <button class="btn btn-primary" @onclick="SignUpChannel">SignUp Event</button>
        </th>
    </tr>
    <tr class="border-2 px-8 py-2">
        <th class="border-2 px-8 py-2">Invite</th>
        <th class="border-2 px-8 py-2">
            <label for="UserInvite">Invite Channel : &nbsp;&nbsp;&nbsp;</label>
            <select class="border py-2 px-3" @bind="InviteChannelName">
                @foreach (var items in ChannelName())
                {
                    <option value=@items>@items</option>
                }
            </select>
        </th>
        <th class="border-2 px-8 py-2 text-center">
            <button class="btn btn-primary" @onclick="UserInvite">Invite Event</button>
        </th>
    </tr>
    <tr class="border-2 px-8 py-2">
        <th class="border-2 px-8 py-2">Custom Event</th>
        <th class="border-2 px-8 py-2">
            <label>Custom Event Name :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" placeholder="Custom Event Name" @bind="EventName"/>
            <p></p>
            <label>Int Parameter :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" placeholder="Int Parameter Name" @bind="IntParameterName"/>&nbsp;&nbsp;&nbsp;<input class="border py-2 px-3" placeholder="Int Value" @bind="IntParameterValue"/>
            <p></p>
            <label>Bool Parameter :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" placeholder="Bool Parameter Name" @bind="BoolParameterName"/>&nbsp;&nbsp;&nbsp;<input type="checkbox" @bind="BoolParameterValue"/>
            <p></p>
            <label>String Parameter :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" placeholder="String Parameter Name" @bind="StringParameterName"/>&nbsp;&nbsp;&nbsp;<input class="border py-2 px-3" placeholder="String Value" @bind="StringParameterValue"/>
        </th>
        <th class="border-2 px-8 py-2 text-center">
            <button class="btn btn-primary" @onclick="CustomEvent">Custom Event</button>
        </th>
    </tr>
    <tr class="border-2 px-8 py-2">
        <th class="border-2 px-8 py-2">Use Credit</th>
        <th class="border-2 px-8 py-2">
            <label>Amount of Credit :&nbsp;&nbsp;&nbsp;</label> <input class="border py-2 px-3" placeholder="CreditAmmount" @bind="CreditAmmount"/>
        </th>
        <th class="border-2 px-8 py-2 text-center">
            <button class="btn btn-primary" @onclick="UseCredit">Use Credit</button>
        </th>
    </tr>
</table>
<br>
<h1 class="text-2xl font-sans">AdBrix Event Utility</h1>
<br>
<table>
    <tr>
        <th>
            <button class="btn btn-primary" @onclick="Logout">Logout</button>
        </th>
        <th>
            <button class="btn btn-primary" @onclick="GetUserId">GetCurrentUserID</button>
        </th>
        <th>
            <button class="btn btn-primary" @onclick="GetUserInfo">GetAlltUserInfo</button>
        </th>
    </tr>
</table>
<br>
<table>
    <tr>
        <th>
            <label>Found Value of UserProperty Key :&nbsp;&nbsp;&nbsp;</label><input class="border py-2 px-3" placeholder="UserPropertyKey" @bind="UserPropertyKey"/>&nbsp;&nbsp;&nbsp;<button class="btn btn-primary" @onclick="GetUserPropertyKeyValue">GetUserPropertyKeyValue</button>
        </th>
    </tr>
</table>

@code
{
    private string LoginId { get; set; }
    private int Age { get; set; }
    private bool Married { get; set; }
    private string RealName { get; set; }

    private string IntParameterName { get; set; }
    private string StringParameterName { get; set; }
    private string BoolParameterName { get; set; }

    private string EventName { get; set; }
    private int IntParameterValue { get; set; }
    private bool BoolParameterValue { get; set; }
    private string StringParameterValue { get; set; }

    private string CurrentUserID;

    private string SignChannelName = "Kakao";
    private string InviteChannelName = "Kakao";

    private int CreditAmmount { get; set; }

    private string UserPropertyKey { get; set; }

    private Dictionary<string, Object> UserInfo = new Dictionary<string, object>();

    private static List<string> ChannelName()
    {
        List<string> _channelName = new List<string>();
        _channelName.Add("Kakao");
        _channelName.Add("Naver");
        _channelName.Add("Line");
        _channelName.Add("Google");
        _channelName.Add("Facebook");
        _channelName.Add("Twitter");
        _channelName.Add("whatsApp");
        _channelName.Add("QQ");
        _channelName.Add("WeChat");
        _channelName.Add("UserID");
        _channelName.Add("ETC");
        _channelName.Add("SkTid");
        _channelName.Add("AppleId");

        return _channelName;
    }


    private void Login()
    {
    //AbxEventController.AbxLogin(LoginId);
        JsRuntime.InvokeVoidAsync("adbrix.login", LoginId);
        JsRuntime.InvokeVoidAsync("alert", ":::Login Event Complete::: " + "UserID : " + LoginId);
    }

    private void UserProperty()
    {
        UserInfo.Add("age", Age);
        UserInfo.Add("married", Married);
        UserInfo.Add("realName", RealName);
    // AbxEventController.UserProperty(UserInfo);

        foreach (KeyValuePair<string, Object> items in UserInfo)
        {
            JsRuntime.InvokeVoidAsync("adbrix.userProperty.addOrUpdate", items.Key, items.Value);
        }

        JsRuntime.InvokeVoidAsync("alert", ":::UserProperty Updated::: " + "UserProperty : " + UserInfo.ToString());
    }

    private void SignUpChannel()
    {
    // AbxEventController.SignUp(SignChannelName);

        if (ChannelName().Contains(SignChannelName))
        {
            JsRuntime.InvokeVoidAsync("adbrix.common.invite", SignChannelName, LoginId);
            JsRuntime.InvokeVoidAsync("alert", "SignUp Complete");
        }
        else
        {
            JsRuntime.InvokeVoidAsync("alert", "This Channel not Available");
        }
    }

    private void UserInvite()
    {
    //AbxEventController.UserInvite(InviteChannelName, LoginId);
        if (ChannelName().Contains(InviteChannelName))
        {
            JsRuntime.InvokeVoidAsync("adbrix.common.invite", InviteChannelName, LoginId);
            JsRuntime.InvokeVoidAsync("alert", "UserInvite Complete");
        }
        else
        {
            JsRuntime.InvokeVoidAsync("alert", "This Channel not Available");
        }
    }

    private void CustomEvent()
    {
        Dictionary<string, object> myDic = new Dictionary<string, object>();
        myDic.Add(IntParameterName, IntParameterValue);
        myDic.Add(BoolParameterName, BoolParameterValue);
        myDic.Add(StringParameterName, StringParameterValue);

    //   AbxEventController.CustomEvent(EventName,myDic);

        JsRuntime.InvokeVoidAsync("adbrix.event.send", EventName, myDic);
    }

    private void UseCredit()
    {
        if (CreditAmmount != 0)
        {
            JsRuntime.InvokeVoidAsync("adbrix.common.useCredit", CreditAmmount);
            JsRuntime.InvokeVoidAsync("alert", "Use Create ::::::" + CreditAmmount.ToString());
        }
        else
        {
            JsRuntime.InvokeVoidAsync("alert", "No Creadit has been used");
        }

    // AbxEventController.UseCredit(CreditAmmount);
    }

    private void Logout()
    {
    //AbxEventController.Logout();

        JsRuntime.InvokeVoidAsync("adbrix.logout");
        JsRuntime.InvokeVoidAsync("alert", "LogOut Complete");
    }

    private async Task GetUserId()
    {
    //await AbxEventController.GetUserID();

        CurrentUserID = await JsRuntime.InvokeAsync<string>("adbrix.getUserId");

        if (CurrentUserID != null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Current UserID ::::: " + CurrentUserID);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "User did not Login");
        }
    }

    private async Task GetUserInfo()
    {
    //await AbxEventController.GetUserInfo();
        object currentUserInfo = await JsRuntime.InvokeAsync<object>("adbrix.userProperty.getAll");

        if (currentUserInfo != null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Current UserInfo ::::: " + currentUserInfo.ToString());
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "User Did not Login");
        }
    }

    private async Task GetUserPropertyKeyValue()
    {
    //await AbxEventController.GetUserPropertyKeyValue(UserPropertyKey);
        object getUserPropertyValue =
            await JsRuntime.InvokeAsync<object>("adbrix.userProperty.get", UserPropertyKey);

        if (getUserPropertyValue != null)
        {
            string getUserPropertyValueString = getUserPropertyValue.ToString();
            await JsRuntime.InvokeVoidAsync("alert", "Current UserProperty Value ::::: " + getUserPropertyValueString);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "No values on that key");
        }
    }

}