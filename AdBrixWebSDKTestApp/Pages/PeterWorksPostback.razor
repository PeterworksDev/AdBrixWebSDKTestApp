@page "/PeterWorksPostback"
@using AdBrixWebSDKTestApp.Models
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime

<h1 class="font-sans text-3xl font-bold">PeterWorksPostback</h1>
<br>
<div class="flex justify-center items-center">
    <table>
        <td>
            <p class="mx-2">AppKey</p>
        </td>
        <td>
            <input class="border py-2 px-3 my-0.5" placeholder="Appkey" @bind="Appkey"/>
        </td>
        <td class="mx-2">PostbackType</td>
        <td>
            <select class="border py-2 px-3 mx-2" @bind="_postbackType">
                @foreach (var items in postbackTypeList())
                {
                    <option value=@items>@items</option>
                }
            </select>
        </td>
        <td class="mx-2">StartDate</td>
        <td>
            <input type="date" class="border py-2 px-3 my-0.5" @bind="_startDate"/>
        </td>
        <td class="mx-2">EndDate</td>
        <td>
            <input type="date" class="border py-2 px-3 my-0.5" @bind="_endDate"/>
        </td>
        <td>
            <button class="btn btn-primary mx-2" @onclick="GetPostbackButton">GetPostback</button>
        </td>
    </table>
</div>
<br>
<div class="flex justify-center items-center">
    <table>
        <thead>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">AppKey</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">Postback_Type</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">ADID</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">IDFV</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">AttrType</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">EventName</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">EventTime</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">ServerTime</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">LogId</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">Platform</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">Carrier</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">DeviceModel</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">Language</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">Country</th>
        <th class="bg-blue-400 border-2 text-center text-white px-2 py-2">Peter_parameter</th>
        </thead>
        @if (_peterworksList != null)
        {
            foreach (var peterValue in _peterworksList)
            {
                var appkey = peterValue.Appkey;
                var postbackType = peterValue.PostbackType;
                var adid = peterValue.Adid;
                var idfv = peterValue.Idfv;
                var attrtype = peterValue.AttrType;
                var eventName = peterValue.EventName;
                var eventTime = peterValue.EventTime;
                var serverTime = peterValue.ServerTime;
                var platform = peterValue.Platform;
                var carrier = peterValue.Carrier;
                var deviceModel = peterValue.DeviceModel;
                var language = peterValue.Language;
                var country = peterValue.Country;
                var peter_parameter = peterValue.PeterParameter;
                var log_id = peterValue.Log_id;

                var eventDateTime = new DateTime(1970, 1, 1).AddSeconds(eventTime).ToLocalTime();
                var serverDateTime = new DateTime(1970, 1, 1).AddSeconds(serverTime).ToLocalTime();

                <tr>
                    <td class="border-2 text-center text-xs px-2 py-2">@appkey</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@postbackType</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@adid</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@idfv</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@attrtype</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@eventName</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@eventDateTime</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@serverDateTime</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@log_id</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@platform</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@carrier</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@deviceModel</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@language</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@country</td>
                    <td class="border-2 text-center text-xs px-2 py-2">@peter_parameter</td>
                </tr>
            }
        }
        @if (_peterworksList == null || _peterworksList.Count == 0)
        {
            <tr>
                <td colspan="15" class="border-2 px-8 py-2 text-center">There is no Data. Please Check your Appkey and Date</td>
            </tr>
        }
    </table>
</div>
<br>
<div class="flex justify-center items-center">
    <table>
        <td>
            <button class="btn btn-primary mx-10" @onclick="BackButton">BackButton</button>
        </td>
        <td>
            <h1 class="font-sans text-3xl font-bold mx-10">@_pageNumber</h1>
        </td>
        <td>
            <button class="btn btn-primary mx-10" @onclick="NextButton">NextButton</button>
        </td>
    </table>
</div>
<br>
<br>

@code {

    private string Appkey { get; set; }
    private string _postbackType = "install";
    private DateTime _startDate = DateTime.Today;
    private DateTime _endDate = DateTime.Today.AddDays(1.0);
    private List<Peterworks> _peterworksList;
    private Peterworks _peterworks;
    private int _pageNumber;
    IEnumerable<KeyValuePair<int, IEnumerable<Peterworks>>> ReportData = new List<KeyValuePair<int, IEnumerable<Peterworks>>>();
    List<KeyValuePair<int, IEnumerable<Peterworks>>> _PeterworksView;

    private List<string> postbackTypeList()
    {
        var postbackTypeName = new List<string>();
        postbackTypeName.Add("install");
        postbackTypeName.Add("event");

        return postbackTypeName;
    }

    private async void GetPostbackButton()
    {
        _pageNumber = 0;
        ReportData = await GetPostback();

        if (ReportData != null)
        {
            _PeterworksView = ReportData.ToList();
            var showData = _PeterworksView[_pageNumber];

            ShowPeterworks(showData.Value);
            await JsRuntime.InvokeVoidAsync("console.log", "::: PagingNumber::: " + showData.Key);
            await JsRuntime.InvokeVoidAsync("console.log", "::: ListCount::: " + _PeterworksView.Count);
        }

        _pageNumber++;
        StateHasChanged();
    }

    private void BackButton()
    {
        if (1 >= _pageNumber)
        {
            JsRuntime.InvokeVoidAsync("alert", "::: Cannot Go Backward :::");
        }
        else if (_pageNumber == _PeterworksView.Count)
        {
            _pageNumber--;
            var showData = _PeterworksView[_pageNumber];
            ShowPeterworks(showData.Value);
        }
        else
        {
            var showData = _PeterworksView[_pageNumber];
            ShowPeterworks(showData.Value);
            _pageNumber--;
            JsRuntime.InvokeVoidAsync("console.log", "::: PagingNumber::: " + showData.Key);
        }
    }

    private void NextButton()
    {
        if (_pageNumber == _PeterworksView.Count)
        {
            JsRuntime.InvokeVoidAsync("alert", "::: No More Content :::");
        }
        else
        {
            var showData = _PeterworksView[_pageNumber];
            ShowPeterworks(showData.Value);
            _pageNumber++;
            JsRuntime.InvokeVoidAsync("console.log", "::: PagingNumber::: " + showData.Key);
        }
    }

    private async Task<IEnumerable<KeyValuePair<int, IEnumerable<Peterworks>>>> GetPostback()
    {
        IEnumerable<KeyValuePair<int, IEnumerable<Peterworks>>> myData = new List<KeyValuePair<int, IEnumerable<Peterworks>>>();

        var startDateUnix = (long)_startDate.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;
        var endDateUnix = (long)_endDate.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;

        if (Appkey != null)
        {
            var jsonData = await HttpClient.GetFromJsonAsync<IEnumerable<KeyValuePair<int, IEnumerable<Peterworks>>>>($"https://peterpostback.azurewebsites.net/api/Peterworks/getpage/appkey={Appkey}&postback_type={_postbackType}&startdate={startDateUnix}&enddate={endDateUnix}&pagesize=10");
            myData = jsonData;
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "::: AppKey is Empty !!! ::: ");
        }
        StateHasChanged();

        return myData;
    }

    private List<Peterworks> ShowPeterworks(IEnumerable<Peterworks> peterworks)
    {
        _peterworksList = new List<Peterworks>();

        foreach (var items in peterworks)
        {
            _peterworks = new Peterworks();

            var getEventTime = items.EventTime.ToString();
            var getServerTime = items.ServerTime.ToString();

            var eventTime = Convert.ToInt64(getEventTime);
            var serverTime = Convert.ToInt64(getServerTime);

            var attrTypeString = items.AttrType;
            var platformString = items.Platform;

            switch (attrTypeString)
            {
                case "0":
                    _peterworks.AttrType = "New Install";
                    break;

                case "1":
                    _peterworks.AttrType = "Re Install";
                    break;

                case "2":
                    _peterworks.AttrType = " Deeplink Open";
                    break;
            }

            switch (platformString)
            {
                case "1":
                    _peterworks.Platform = "Android";
                    break;

                case "2":
                    _peterworks.Platform = "iOS";
                    break;
            }

            _peterworks.Appkey = items.Appkey;
            _peterworks.PostbackType = items.PostbackType;
            _peterworks.Adid = items.Adid;
            _peterworks.Idfv = items.Idfv;
            _peterworks.EventName = items.EventName;
            _peterworks.EventTime = eventTime;
            _peterworks.ServerTime = serverTime;
            _peterworks.Carrier = items.Carrier;
            _peterworks.DeviceModel = items.DeviceModel;
            _peterworks.Language = items.Language;
            _peterworks.Country = items.Country;
            _peterworks.PeterParameter = items.PeterParameter;
            _peterworks.Log_id = items.Log_id;

            _peterworksList.Add(_peterworks);
        }

        StateHasChanged();
        return _peterworksList;
    }

}